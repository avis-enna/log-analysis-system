version: '3.8'

services:
  # PostgreSQL Database
  postgres:
    image: docker.io/postgres:15
    container_name: log-analyzer-postgres
    environment:
      POSTGRES_DB: loganalyzer
      POSTGRES_USER: loganalyzer
      POSTGRES_PASSWORD: password
      POSTGRES_INITDB_ARGS: "--encoding=UTF-8"
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
    networks:
      - log-analyzer-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U loganalyzer -d loganalyzer"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Elasticsearch
  elasticsearch:
    image: docker.io/elasticsearch:8.11.0
    container_name: log-analyzer-elasticsearch
    environment:
      - discovery.type=single-node
      - xpack.security.enabled=false
      - "ES_JAVA_OPTS=-Xms512m -Xmx512m"
      - bootstrap.memory_lock=true
    ulimits:
      memlock:
        soft: -1
        hard: -1
    ports:
      - "9200:9200"
      - "9300:9300"
    volumes:
      - elasticsearch_data:/usr/share/elasticsearch/data
    networks:
      - log-analyzer-network
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:9200/_cluster/health || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 5

  # Redis
  redis:
    image: docker.io/redis:7-alpine
    container_name: log-analyzer-redis
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    networks:
      - log-analyzer-network
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Backend Application
  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile
    container_name: log-analyzer-backend
    depends_on:
      - postgres
      - elasticsearch
      - redis
    ports:
      - "8080:8080"
    environment:
      # Database
      DATABASE_URL: jdbc:postgresql://postgres:5432/loganalyzer
      DATABASE_USERNAME: loganalyzer
      DATABASE_PASSWORD: password
      
      # Elasticsearch
      ELASTICSEARCH_HOST: elasticsearch
      ELASTICSEARCH_PORT: 9200
      
      # Redis
      REDIS_HOST: redis
      REDIS_PORT: 6379
      
      # Application
      SPRING_PROFILES_ACTIVE: docker
      LOG_LEVEL: INFO
      
      # Security
      JWT_SECRET: my-super-secret-jwt-key-for-development
      ALLOWED_ORIGINS: http://localhost:3000,http://frontend:3000
    volumes:
      - ./logs:/app/logs
    networks:
      - log-analyzer-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8080/api/v1/health"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 60s

  # Frontend Application
  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
    container_name: log-analyzer-frontend
    depends_on:
      - backend
    ports:
      - "3000:3000"
    environment:
      REACT_APP_API_URL: http://localhost:8080/api/v1
      REACT_APP_WS_URL: ws://localhost:8080/ws
      NODE_ENV: production
    networks:
      - log-analyzer-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3000"]
      interval: 30s
      timeout: 10s
      retries: 5

volumes:
  postgres_data:
    driver: local
  elasticsearch_data:
    driver: local
  redis_data:
    driver: local

networks:
  log-analyzer-network:
    driver: bridge
